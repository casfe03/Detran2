<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.25">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@1.3.2"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@1.3.2">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Sistema de Controle de Materiais</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.security.AuthorizationMatrixProperty>
      <inheritanceStrategy class="org.jenkinsci.plugins.matrixauth.inheritance.InheritParentStrategy"/>
      <permission>hudson.model.Item.Build:alan-bs</permission>
      <permission>hudson.model.Item.Build:erik-qo</permission>
      <permission>hudson.model.Item.Build:klayton-sv</permission>
      <permission>hudson.model.Item.Build:luiz-fb</permission>
      <permission>hudson.model.Item.Build:uaslei-fd</permission>
      <permission>hudson.model.Item.Build:walber-mr</permission>
      <permission>hudson.model.Item.Read:alan-bs</permission>
      <permission>hudson.model.Item.Read:erik-qo</permission>
      <permission>hudson.model.Item.Read:klayton-sv</permission>
      <permission>hudson.model.Item.Read:luiz-fb</permission>
      <permission>hudson.model.Item.Read:uaslei-fd</permission>
      <permission>hudson.model.Item.Read:walber-mr</permission>
    </hudson.security.AuthorizationMatrixProperty>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>5</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <org.jenkinsci.plugins.workflow.job.properties.DisableConcurrentBuildsJobProperty/>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition plugin="subversion@2.12.1">
          <name>Tag</name>
          <description>Select a Subversion entry</description>
          <tagsDir>https://svn.detran.goias.intra/svn/java/Escrit처rio Processos Detran/Gest찾o de TI/sigma/Tags</tagsDir>
          <credentialsId>9838a34a-d7c8-4401-b4eb-f391afc45ad6</credentialsId>
          <tagsFilter></tagsFilter>
          <reverseByDate>true</reverseByDate>
          <reverseByName>false</reverseByName>
          <defaultValue></defaultValue>
          <maxTags></maxTags>
        </hudson.scm.listtagsparameter.ListSubversionTagsParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.57">
    <script>node{
  stage(&apos;SCM&apos;){
      checkout([
          $class: &apos;SubversionSCM&apos;, 
          additionalCredentials: [],
          excludedCommitMessages: &apos;&apos;, 
          excludedRegions: &apos;&apos;, 
          excludedRevprop: &apos;&apos;, 
          excludedUsers: &apos;&apos;, 
          filterChangelog: false, 
          ignoreDirPropChanges: false, 
          includedRegions: &apos;&apos;, 
          locations: [
              [
                  cancelProcessOnExternalsFail: true, 
                  credentialsId: &apos;9838a34a-d7c8-4401-b4eb-f391afc45ad6&apos;, 
                  depthOption: &apos;infinity&apos;, 
                  ignoreExternalsOption: true, 
                  local: &apos;.&apos;, 
                  remote: &apos;https://svn.detran.goias.intra/svn/java/Escrit처rio Processos Detran/Gest찾o de TI/sigma/Tags/${Tag}/4%20-%20Implementa%C3%A7%C3%A3o/sigma&apos;
              ]
          ], 
          quietOperation: false,
          workspaceUpdater: [$class: &apos;CheckoutUpdater&apos;]
      ])
  }
  stage(&apos;QA&apos;) {
      stage(&apos;QA-Compile&apos;) {
          withMaven(maven: &apos;maven-3&apos;){
              sh &apos;mvn -X -Duser.home=/opt/.jenkins clean package -Phomolog -U&apos;
          }
      }
      stage(&apos;QA-Analisys&apos;) {
          withSonarQubeEnv(&apos;sonar-6&apos;){
              withMaven(maven: &apos;maven-3&apos;){
                  sh &apos;mvn -X -Duser.home=/opt/.jenkins -Phomolog sonar:sonar&apos;
              }
          }
      }
      stage(&apos;QA-Quality Gate&apos;){
          timeout (time: 5, unit: &apos;MINUTES&apos;) {
              def qg = waitForQualityGate()          
              if (qg.status != &apos;OK&apos;) {
                  error &quot;Pipeline aborted due to quality gate failure: ${qg.status}&quot;
              }
          }
      }
  }
  
  stage(&apos;Build&apos;){
      withMaven(maven: &apos;maven-3&apos;){
          sh &apos;mvn -X -Duser.home=/opt/.jenkins -Phomolog package&apos;
      }
  }
  

  stage(&apos;Deploy DETRAN WAR&apos;){
      withCredentials([usernamePassword(credentialsId: &apos;jboss-eap6&apos;, passwordVariable: &apos;PASSWORD&apos;, usernameVariable: &apos;USERNAME&apos;)]) {
          def jbossCli=&quot;/opt/jboss-6.4.21/bin/jboss-cli.sh --connect --controller=10.110.30.70&quot;
          def jbossStatus=&quot;&quot;
          def jbossExists=&quot;&quot;
          stage (&apos;Deploy-Init&apos;){
              jbossStatus=sh( returnStdout: true, script: &quot;$jbossCli --user=${USERNAME} --password=${PASSWORD} --command=&apos;/server-group=Homolog-Detran:read-resource&apos;&quot;)
              jbossExists=jbossStatus.toLowerCase().contains(&quot;sigma.war&quot;)
          }
          if (jbossExists) {
              stage(&apos;Deploy-Replace&apos;){
                  jbossStatus=sh( returnStdout: true, script: &quot;$jbossCli --user=${USERNAME} --password=${PASSWORD} --command=&apos;deploy target/sigma.war --force --headers={rollout Homolog-Detran(rolling-to-servers=false)}&apos;&quot;)
                  echo jbossStatus
              }
          } else {
              stage(&apos;Deploy-New&apos;){
                      jbossStatus=sh( returnStdout: true, script: &quot;$jbossCli --user=${USERNAME} --password=${PASSWORD} --command=&apos;deploy target/sigma.war --server-groups=Homolog-Detran  --name=sigma.war&apos;&quot;)
                      echo jbossStatus
              }
          }
      }
  }

}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>